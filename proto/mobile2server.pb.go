// Code generated by protoc-gen-go.
// source: mobile2server.proto
// DO NOT EDIT!

/*
Package mobile2server is a generated protocol buffer package.

It is generated from these files:
	mobile2server.proto

It has these top-level messages:
	Request
	Reply
	SRequest
	SReply
*/
package mobile2server

import proto "github.com/golang/protobuf/proto"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal

type Request struct {
	Value string `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
}

func (m *Request) Reset()         { *m = Request{} }
func (m *Request) String() string { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()    {}

type Reply struct {
	Value string `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
}

func (m *Reply) Reset()         { *m = Reply{} }
func (m *Reply) String() string { return proto.CompactTextString(m) }
func (*Reply) ProtoMessage()    {}

type SRequest struct {
	Id    int32  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (m *SRequest) Reset()         { *m = SRequest{} }
func (m *SRequest) String() string { return proto.CompactTextString(m) }
func (*SRequest) ProtoMessage()    {}

type SReply struct {
	Id    int32  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (m *SReply) Reset()         { *m = SReply{} }
func (m *SReply) String() string { return proto.CompactTextString(m) }
func (*SReply) ProtoMessage()    {}

func init() {
}

// Client API for Greeter service

type GreeterClient interface {
	SayHello(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Reply, error)
	Spliti(ctx context.Context, in *Request, opts ...grpc.CallOption) (Greeter_SplitiClient, error)
	Cat(ctx context.Context, opts ...grpc.CallOption) (Greeter_CatClient, error)
	Transmit(ctx context.Context, opts ...grpc.CallOption) (Greeter_TransmitClient, error)
	Forwarding(ctx context.Context, in *Request, opts ...grpc.CallOption) (Greeter_ForwardingClient, error)
}

type greeterClient struct {
	cc *grpc.ClientConn
}

func NewGreeterClient(cc *grpc.ClientConn) GreeterClient {
	return &greeterClient{cc}
}

func (c *greeterClient) SayHello(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := grpc.Invoke(ctx, "/mobile2server.greeter/SayHello", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greeterClient) Spliti(ctx context.Context, in *Request, opts ...grpc.CallOption) (Greeter_SplitiClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Greeter_serviceDesc.Streams[0], c.cc, "/mobile2server.greeter/Spliti", opts...)
	if err != nil {
		return nil, err
	}
	x := &greeterSplitiClient{stream}
	if err := x.ClientStream.SendProto(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Greeter_SplitiClient interface {
	Recv() (*SReply, error)
	grpc.ClientStream
}

type greeterSplitiClient struct {
	grpc.ClientStream
}

func (x *greeterSplitiClient) Recv() (*SReply, error) {
	m := new(SReply)
	if err := x.ClientStream.RecvProto(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *greeterClient) Cat(ctx context.Context, opts ...grpc.CallOption) (Greeter_CatClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Greeter_serviceDesc.Streams[1], c.cc, "/mobile2server.greeter/Cat", opts...)
	if err != nil {
		return nil, err
	}
	x := &greeterCatClient{stream}
	return x, nil
}

type Greeter_CatClient interface {
	Send(*SRequest) error
	CloseAndRecv() (*Reply, error)
	grpc.ClientStream
}

type greeterCatClient struct {
	grpc.ClientStream
}

func (x *greeterCatClient) Send(m *SRequest) error {
	return x.ClientStream.SendProto(m)
}

func (x *greeterCatClient) CloseAndRecv() (*Reply, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Reply)
	if err := x.ClientStream.RecvProto(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *greeterClient) Transmit(ctx context.Context, opts ...grpc.CallOption) (Greeter_TransmitClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Greeter_serviceDesc.Streams[2], c.cc, "/mobile2server.greeter/Transmit", opts...)
	if err != nil {
		return nil, err
	}
	x := &greeterTransmitClient{stream}
	return x, nil
}

type Greeter_TransmitClient interface {
	Send(*SRequest) error
	Recv() (*SReply, error)
	grpc.ClientStream
}

type greeterTransmitClient struct {
	grpc.ClientStream
}

func (x *greeterTransmitClient) Send(m *SRequest) error {
	return x.ClientStream.SendProto(m)
}

func (x *greeterTransmitClient) Recv() (*SReply, error) {
	m := new(SReply)
	if err := x.ClientStream.RecvProto(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *greeterClient) Forwarding(ctx context.Context, in *Request, opts ...grpc.CallOption) (Greeter_ForwardingClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Greeter_serviceDesc.Streams[3], c.cc, "/mobile2server.greeter/Forwarding", opts...)
	if err != nil {
		return nil, err
	}
	x := &greeterForwardingClient{stream}
	if err := x.ClientStream.SendProto(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Greeter_ForwardingClient interface {
	Recv() (*SReply, error)
	grpc.ClientStream
}

type greeterForwardingClient struct {
	grpc.ClientStream
}

func (x *greeterForwardingClient) Recv() (*SReply, error) {
	m := new(SReply)
	if err := x.ClientStream.RecvProto(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Greeter service

type GreeterServer interface {
	SayHello(context.Context, *Request) (*Reply, error)
	Spliti(*Request, Greeter_SplitiServer) error
	Cat(Greeter_CatServer) error
	Transmit(Greeter_TransmitServer) error
	Forwarding(*Request, Greeter_ForwardingServer) error
}

func RegisterGreeterServer(s *grpc.Server, srv GreeterServer) {
	s.RegisterService(&_Greeter_serviceDesc, srv)
}

func _Greeter_SayHello_Handler(srv interface{}, ctx context.Context, buf []byte) (proto.Message, error) {
	in := new(Request)
	if err := proto.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(GreeterServer).SayHello(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Greeter_Spliti_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Request)
	if err := stream.RecvProto(m); err != nil {
		return err
	}
	return srv.(GreeterServer).Spliti(m, &greeterSplitiServer{stream})
}

type Greeter_SplitiServer interface {
	Send(*SReply) error
	grpc.ServerStream
}

type greeterSplitiServer struct {
	grpc.ServerStream
}

func (x *greeterSplitiServer) Send(m *SReply) error {
	return x.ServerStream.SendProto(m)
}

func _Greeter_Cat_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GreeterServer).Cat(&greeterCatServer{stream})
}

type Greeter_CatServer interface {
	SendAndClose(*Reply) error
	Recv() (*SRequest, error)
	grpc.ServerStream
}

type greeterCatServer struct {
	grpc.ServerStream
}

func (x *greeterCatServer) SendAndClose(m *Reply) error {
	return x.ServerStream.SendProto(m)
}

func (x *greeterCatServer) Recv() (*SRequest, error) {
	m := new(SRequest)
	if err := x.ServerStream.RecvProto(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Greeter_Transmit_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GreeterServer).Transmit(&greeterTransmitServer{stream})
}

type Greeter_TransmitServer interface {
	Send(*SReply) error
	Recv() (*SRequest, error)
	grpc.ServerStream
}

type greeterTransmitServer struct {
	grpc.ServerStream
}

func (x *greeterTransmitServer) Send(m *SReply) error {
	return x.ServerStream.SendProto(m)
}

func (x *greeterTransmitServer) Recv() (*SRequest, error) {
	m := new(SRequest)
	if err := x.ServerStream.RecvProto(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Greeter_Forwarding_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Request)
	if err := stream.RecvProto(m); err != nil {
		return err
	}
	return srv.(GreeterServer).Forwarding(m, &greeterForwardingServer{stream})
}

type Greeter_ForwardingServer interface {
	Send(*SReply) error
	grpc.ServerStream
}

type greeterForwardingServer struct {
	grpc.ServerStream
}

func (x *greeterForwardingServer) Send(m *SReply) error {
	return x.ServerStream.SendProto(m)
}

var _Greeter_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mobile2server.greeter",
	HandlerType: (*GreeterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello",
			Handler:    _Greeter_SayHello_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Spliti",
			Handler:       _Greeter_Spliti_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Cat",
			Handler:       _Greeter_Cat_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Transmit",
			Handler:       _Greeter_Transmit_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Forwarding",
			Handler:       _Greeter_Forwarding_Handler,
			ServerStreams: true,
		},
	},
}
